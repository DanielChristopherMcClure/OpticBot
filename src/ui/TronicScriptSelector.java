/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package ui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;

import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import script.OpticScript;
import sounds.SoundPlayer;
import utilities.Tools;
import wrappers.UserAccount;
import core.Ibot;

/**
 * 
 * @author Dan
 */
public class TronicScriptSelector extends javax.swing.JFrame implements
		ActionListener, ListSelectionListener {

	private Ibot bot = null;

	public ImageIcon play = new ImageIcon("Data/Images/play.png");
	public ImageIcon plus = new ImageIcon("Data/Images/plus.png");

	ArrayList<String> directories = new ArrayList<String>();

	DefaultListModel scripts = new DefaultListModel();
	DefaultListModel dirs = new DefaultListModel();

	DefaultComboBoxModel accs = new DefaultComboBoxModel();

	String lastSelectedDir = null;

	/**
	 * Creates new form TSS
	 */
	public TronicScriptSelector(Ibot bot) {
		initComponents();
		this.bot = bot;
		this.setTitle("Script Selector");
		this.setIconImage(TronicUI.T);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jScrollPane1 = new javax.swing.JScrollPane();
		SCRIPTLIST = new javax.swing.JList();
		ACCOUNTLIST = new javax.swing.JComboBox();
		RUNBUTTON = new javax.swing.JButton();
		DIRECTORYNAME = new javax.swing.JTextField();
		ADDDIRECTORY = new javax.swing.JButton();
		jScrollPane2 = new javax.swing.JScrollPane();
		DIRECTORYLIST = new javax.swing.JList();

		DIRECTORYLIST.addListSelectionListener(this);

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

		jScrollPane1.setViewportView(SCRIPTLIST);

		RUNBUTTON.setText("Run Script");
		RUNBUTTON.addActionListener(this);
		RUNBUTTON.setIcon(play);

		ADDDIRECTORY.setText("Add Directory");
		ADDDIRECTORY.addActionListener(this);
		ADDDIRECTORY.setIcon(plus);

		jScrollPane2.setViewportView(DIRECTORYLIST);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						javax.swing.GroupLayout.Alignment.TRAILING,
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(
														layout.createSequentialGroup()
																.addGroup(
																		layout.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.LEADING,
																				false)
																				.addComponent(
																						DIRECTORYNAME)
																				.addComponent(
																						ADDDIRECTORY,
																						javax.swing.GroupLayout.DEFAULT_SIZE,
																						159,
																						Short.MAX_VALUE)
																				.addComponent(
																						jScrollPane2))
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																.addComponent(
																		jScrollPane1,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		387,
																		javax.swing.GroupLayout.PREFERRED_SIZE))
												.addGroup(
														layout.createSequentialGroup()
																.addComponent(
																		ACCOUNTLIST,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		281,
																		javax.swing.GroupLayout.PREFERRED_SIZE)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																.addComponent(
																		RUNBUTTON,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		Short.MAX_VALUE)))
								.addContainerGap()));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING,
												false)
												.addComponent(
														jScrollPane1,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														365,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addGroup(
														layout.createSequentialGroup()
																.addComponent(
																		DIRECTORYNAME,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		javax.swing.GroupLayout.PREFERRED_SIZE)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(
																		ADDDIRECTORY)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(
																		jScrollPane2)))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(
														ACCOUNTLIST,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(RUNBUTTON))
								.addContainerGap(
										javax.swing.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE)));

		pack();
	}// </editor-fold>

	// Variables declaration - do not modify
	public static javax.swing.JComboBox ACCOUNTLIST;
	public static javax.swing.JButton ADDDIRECTORY;
	public static javax.swing.JList DIRECTORYLIST;
	public static javax.swing.JTextField DIRECTORYNAME;
	public static javax.swing.JButton RUNBUTTON;
	public static javax.swing.JList SCRIPTLIST;
	public static javax.swing.JScrollPane jScrollPane1;
	public static javax.swing.JScrollPane jScrollPane2;

	// End of variables declaration

	public void open() {
		this.readDirs();
		this.populateAccounts();
		if (directories.size() > 0) {
			try {
				this.populateScriptList(directories.get(0));
			} catch (ClassNotFoundException | NoSuchMethodException
					| SecurityException | InstantiationException
					| IllegalAccessException | IllegalArgumentException
					| InvocationTargetException | MalformedURLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		this.setVisible(true);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		if (Ibot.sound)
			new Thread(new SoundPlayer(new File("Data/Sounds/drop.wav")))
					.start();
		switch (e.getActionCommand()) {
		case "Add Directory":
			ArrayList<String> newList = new ArrayList<String>();
			String dir = TronicScriptSelector.DIRECTORYNAME.getText();
			newList.add("Directories: ");
			for (String s : directories)
				newList.add(s);
			Tools.log("Adding New Directory: " + dir);
			newList.add(dir);
			Tools.writeFile(newList.toArray(new String[] {}), new File(
					"Data/Settings/dirs.txt"));
			this.readDirs();
			break;
		case "Run Script":
			if (SCRIPTLIST.getSelectedValue() != null) {
				String script = (scripts.get(SCRIPTLIST.getSelectedIndex())
						.toString().split("~")[0]).replace(" ", "")
						+ ".jar";
				Tools.log("Running Jar: " + script);
				File it = new File(
						(this.lastSelectedDir + "/" + script)
								.replace("//", "/"));
				if (it.exists()) {
					bot.jLoader.setScript(it, script.replace(".jar", ""));
					if (ACCOUNTLIST.getSelectedItem() != null) {
						String acc = ACCOUNTLIST.getSelectedItem().toString();
						for (UserAccount ua : Ibot.accounts) {
							if (ua.getUsername().equals(acc)) {
								Ibot.setActive(ua);
							}
						}
					}
				} else {
					Tools.log("Failed to run Jar File: " + it.getAbsolutePath());
				}
			} else {
				Tools.showErrorMessage("Please choose a script to run!", this);
			}
			break;
		}
	}

	@Override
	public void valueChanged(ListSelectionEvent e) {
		if (DIRECTORYLIST.getSelectedValue() != null) {
			try {
				Tools.log("Changing Directory To: "
						+ directories.get(DIRECTORYLIST.getSelectedIndex()));
				this.populateScriptList(directories.get(DIRECTORYLIST
						.getSelectedIndex()));
			} catch (ClassNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (NoSuchMethodException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (SecurityException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (InstantiationException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (IllegalAccessException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (IllegalArgumentException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (InvocationTargetException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (MalformedURLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
	}

	public void populateScriptList(String dir) throws ClassNotFoundException,
			NoSuchMethodException, SecurityException, InstantiationException,
			IllegalAccessException, IllegalArgumentException,
			InvocationTargetException, MalformedURLException {
		this.lastSelectedDir = dir;
		scripts.clear();
		if (dir.contains("http") && dir.contains(".jar")) {
			@SuppressWarnings("deprecation")
			ClassLoader clientClassLoader = new URLClassLoader(
					new URL[] { new URL(dir) });
			String name = dir.split("/")[dir.split("/").length - 1];
			Tools.log("Online jar Name: " + name);
			Class<?> scriptClass = clientClassLoader.loadClass(name.replace(
					".jar", ""));
			Constructor<?> con;
			con = scriptClass.getConstructor(new Class[] { bot.methods
					.getClass() });
			con.setAccessible(true);
			Object it = con.newInstance(bot.methods);
			if (it instanceof OpticScript) {
				OpticScript ts = (OpticScript) it;
				Tools.log("Adding Script To List: " + ts.getName());
				scripts.addElement(ts.getName() + "     ~      "
						+ ts.getDescription());
				SCRIPTLIST.setModel(scripts);
			}
		} else {
			File d = new File(dir);
			if (d.exists()) {
				for (File f : d.listFiles()) {
					if (f.getPath().contains(".jar")) {
						@SuppressWarnings("deprecation")
						ClassLoader clientClassLoader = new URLClassLoader(
								new URL[] { f.toURL() });
						Class<?> scriptClass = clientClassLoader.loadClass(f
								.getName().replace(".jar", ""));
						Constructor<?> con;

						con = scriptClass
								.getConstructor(new Class[] { bot.methods
										.getClass() });
						con.setAccessible(true);
						Object it = con.newInstance(bot.methods);
						if (it instanceof OpticScript) {
							OpticScript ts = (OpticScript) it;
							Tools.log("Adding Script To List: " + ts.getName());
							scripts.addElement(ts.getName() + "     ~      "
									+ ts.getDescription());
							SCRIPTLIST.setModel(scripts);
						}
					}
				}
			} else {
				Tools.log("Directory DOES NOT EXIST: " + dir);
			}
		}
	}

	public void populateAccounts() {
		accs.removeAllElements();
		for (UserAccount ua : Ibot.accounts) {
			accs.addElement(ua.getUsername());
			ACCOUNTLIST.setModel(accs);
		}
	}

	public void readDirs() {
		directories.clear();
		dirs.clear();
		directories.add("Script Repo");
		dirs.addElement("Script Repo");
		File d = new File("Data/Settings/dirs.txt");
		if (d.exists()) {
			String[] lines = Tools.getTextFrom(d);
			for (String l : lines) {
				if (l != null) {
					if (new File(l).exists() || l.contains("http")) {
						directories.add(l);
						dirs.addElement(l);
						DIRECTORYLIST.setModel(dirs);
					} else {
						Tools.log("Directory NOT FOUND: " + l);
					}
				}
			}
		}
	}
}
