/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package ui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;

import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JSeparator;

import core.Ibot;
import sounds.SoundPlayer;
import utilities.Tools;

/**
 * 
 * @author Dan
 */
public class TronicUI extends JFrame implements ActionListener {

	public static ImageIcon play = new ImageIcon("Data/Images/play.png");
	public static ImageIcon playing = new ImageIcon("Data/Images/playing.png");
	public static ImageIcon stop = new ImageIcon("Data/Images/stop.png");
	public static ImageIcon account = new ImageIcon("Data/Images/account.png");
	public static ImageIcon robot = new ImageIcon("Data/Images/robot.png");
	public static ImageIcon mouseIcon = new ImageIcon("Data/Images/mouseIcon.png");
	public static ImageIcon guy = new ImageIcon("Data/Images/guy.png");
	public static ImageIcon search = new ImageIcon("Data/Images/search.png");
	public static ImageIcon pause = new ImageIcon("Data/Images/pause.png");
	public static ImageIcon tile = new ImageIcon("Data/Images/tile.png");

	public static Image T = Tools.getLocalImage("Data/Images/t.png");

	private Ibot bot = null;

	/**
	 * Creates new form TronicUI
	 */
	public TronicUI(Ibot bot) {
		this.bot = bot;
		initComponents();
		this.setIconImage(T);
		this.setAlwaysOnTop(true);
		this.setResizable(false);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		BACKPANEL = new javax.swing.JPanel();
		TABS = new javax.swing.JTabbedPane();
		jMenuBar1 = new javax.swing.JMenuBar();
		ACCOUNTMENU = new javax.swing.JMenu();
		jMenuItem1 = new javax.swing.JMenuItem();

		jMenuItem1.addActionListener(this);
		STOPSCRIPT.addActionListener(this);
		STARTSCRIPT.addActionListener(this);
		ACCOUNTS.addActionListener(this);
		WIDGETEXPLORER.addActionListener(this);
		PATHUI.addActionListener(this);
		TRONICPATHUI.addActionListener(this);

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		javax.swing.GroupLayout BACKPANELLayout = new javax.swing.GroupLayout(BACKPANEL);
		BACKPANEL.setLayout(BACKPANELLayout);
		BACKPANELLayout
				.setHorizontalGroup(BACKPANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addComponent(TABS, javax.swing.GroupLayout.DEFAULT_SIZE, 825, Short.MAX_VALUE));
		BACKPANELLayout.setVerticalGroup(BACKPANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(TABS, javax.swing.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE));

		ACCOUNTMENU.setText("Accounts");
		ACCOUNTS.setIcon(account);
		ACCOUNTMENU.add(ACCOUNTS);

		screenShot.addActionListener(this);
		clearColors.addActionListener(this);
		DEBUG.add(debugMouseColor);
		DEBUG.add(debugClusters);
		DEBUG.add(debugLastClick);
		DEBUG.add(debugRect);
		DEBUG.add(debugLoginState);
		DEBUG.add(debugTopText);
		DEBUG.add(debugEdges);
		DEBUG.add(debugMM);
		DEBUG.add(logColor);
		DEBUG.add(debugInv);
		debugPoly.addActionListener(this);
		DEBUG.add(debugPoly);
		DEBUG.add(debugGame);
		DEBUG.add(screenShot);
		DEBUG.add(drawRect);
		DEBUG.add(drawSelectedColors);
		DEBUG.add(clearColors);
		UPDATE.addActionListener(this);
		DEBUG.add(UPDATE);
		
		// BLOCKINPUT.setIcon(mouseIcon);
		WIDGETEXPLORER.setIcon(search);
		// TOOLS.add(BLOCKINPUT);
		TOOLS.add(WIDGETEXPLORER);
		TRONICPATHUI.setIcon(tile);
		TOOLS.add(TRONICPATHUI);

		BOTS.add(new JSeparator());
		STARTSCRIPT.setIcon(play);
		STOPSCRIPT.setIcon(stop);
		PAUSE.setIcon(pause);
		BOTS.add(STARTSCRIPT);
		BOTS.add(PAUSE);
		BOTS.add(STOPSCRIPT);

		JMenu macro = new JMenu("Macro Recorder");
		macro.add(RECORD);
		RECORD.addActionListener(this);
		macro.add(PLAYMACRO);
		PLAYMACRO.addActionListener(this);
		SETMACRO.addActionListener(this);
		macro.add(SETMACRO);
		SAVEMACRO.addActionListener(this);
		macro.addSeparator();
		macro.add(SAVEMACRO);

		jMenuBar1.add(BOTS);
		jMenuBar1.add(ACCOUNTMENU);
		jMenuBar1.add(DEBUG);
		jMenuBar1.add(TOOLS);
		jMenuBar1.add(macro);

		jMenuBar1.add(Box.createGlue());
		STARTSCRIPTBUTTON.setIcon(play);
		STARTSCRIPTBUTTON.setActionCommand("Start Script");
		STARTSCRIPTBUTTON.addActionListener(this);
		STARTSCRIPTBUTTON.setFadeInColor(new Color(20, 220, 30));
		jMenuBar1.add(TronicUI.STARTSCRIPTBUTTON, BorderLayout.EAST);
		STOPSCRIPTBUTTON.setIcon(stop);
		STOPSCRIPTBUTTON.setActionCommand("Stop Script");
		STOPSCRIPTBUTTON.addActionListener(this);
		STOPSCRIPTBUTTON.setFadeInColor(new Color(255, 0, 0));
		jMenuBar1.add(TronicUI.STOPSCRIPTBUTTON, BorderLayout.EAST);
		PAUSESCRIPTBUTTON.setIcon(pause);
		PAUSESCRIPTBUTTON.setActionCommand("Pause Script");
		PAUSESCRIPTBUTTON.addActionListener(this);
		PAUSESCRIPTBUTTON.setFadeInColor(new Color(255, 255, 82));
		jMenuBar1.add(TronicUI.PAUSESCRIPTBUTTON, BorderLayout.EAST);

		setJMenuBar(jMenuBar1);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(BACKPANEL,
						javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(BACKPANEL,
						javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));

		pack();
	}// </editor-fold>

	// Variables declaration - do not modify
	public static javax.swing.JPanel BACKPANEL;
	public static javax.swing.JTabbedPane TABS;
	public static javax.swing.JMenu ACCOUNTMENU;
	public static javax.swing.JMenuBar jMenuBar1;
	public static javax.swing.JMenuItem jMenuItem1;
	public static JMenuItem STARTSCRIPT = new JMenuItem("Start Script");
	public static JMenuItem STOPSCRIPT = new JMenuItem("Stop Script");
	public static JMenuItem ACCOUNTS = new JMenuItem("Account Manager");
	public static JMenu DEBUG = new JMenu("Debug");
	public static JMenu TOOLS = new JMenu("Tools");
	public static JMenuItem WIDGETEXPLORER = new JMenuItem("Widget Explorer");
	public static JMenuItem PATHUI = new JMenuItem("Smart Path Tool");
	public static JMenuItem TRONICPATHUI = new JMenuItem("Path Maker");
	public static NexusRadioButton DEBUGNPC = new NexusRadioButton("Draw NPCs");
	public static NexusRadioButton DEBUGNPCMODEL = new NexusRadioButton("   + Draw NPC Models");
	public static NexusRadioButton DEBUGOBJECTS = new NexusRadioButton("Draw Objects");
	public static NexusRadioButton DEBUGOBJECTMODELS = new NexusRadioButton("   + Draw Object Models");
	public static NexusRadioButton DEBUGPLAYERS = new NexusRadioButton("Draw Players");
	public static NexusRadioButton DEBUGGROUNDITEMS = new NexusRadioButton("Draw GroundItems");
	public static NexusRadioButton DEBUGTILES = new NexusRadioButton("Draw Tiles");
	public static NexusRadioButton DEBUGINVENTORY = new NexusRadioButton("Draw Inventory");
	public static NexusRadioButton DEBUGCOLOR = new NexusRadioButton("Draw Color Clusters");
	public static NexusRadioButton DEBUGMOUSE = new NexusRadioButton("Draw Mouse Info");
	public static NexusRadioButton DEBUGOTHER = new NexusRadioButton("Draw Other Info");
	public static NexusRadioButton DEBUGWIDGETS = new NexusRadioButton("Draw Widgets");
	public static NexusRadioButton DEBUGBANK = new NexusRadioButton("Draw Bank");
	public static JMenu BOTS = new JMenu("Script");
	public static NexusRadioButton BLOCKINPUT = new NexusRadioButton("Block Input");
	public static NexusRadioButton DEBUGMOUSETILE = new NexusRadioButton("Debug Mouseover Tile");
	public static JMenuItem PAUSE = new JMenuItem("Pause Script");
	public static NexusButton STARTSCRIPTBUTTON = new NexusButton(play.getImage());
	public static NexusButton STOPSCRIPTBUTTON = new NexusButton(stop.getImage());
	public static NexusButton PAUSESCRIPTBUTTON = new NexusButton(pause.getImage());
	public static JRadioButtonMenuItem debugMouseColor = new JRadioButtonMenuItem("Debug Mouse Color");
	public static JRadioButtonMenuItem debugClusters = new JRadioButtonMenuItem("Debug Mouse Color Clusters");
	public static JRadioButtonMenuItem debugLastClick = new JRadioButtonMenuItem("Debug Last Color Click");
	public static JRadioButtonMenuItem debugRect = new JRadioButtonMenuItem("Debug Color Points in Rect");
	public static JRadioButtonMenuItem debugLoginState = new JRadioButtonMenuItem("Debug Login State");
	public static JRadioButtonMenuItem debugTopText = new JRadioButtonMenuItem("Debug TopText");
	public static JRadioButtonMenuItem debugEdges = new JRadioButtonMenuItem("Debug Edges");
	public static JRadioButtonMenuItem debugMM = new JRadioButtonMenuItem("Debug Compass / Paths");
	public static JRadioButtonMenuItem logColor = new JRadioButtonMenuItem("Log Click Color");
	public static JRadioButtonMenuItem debugInv = new JRadioButtonMenuItem("Debug Inventory");
	public static JRadioButtonMenuItem debugPoly = new JRadioButtonMenuItem("Debug Polygon");
	public static JRadioButtonMenuItem debugGame = new JRadioButtonMenuItem("Debug Game");
	public static JRadioButtonMenuItem drawRect = new JRadioButtonMenuItem("Rectangle Debug");
	public static JRadioButtonMenuItem drawSelectedColors = new JRadioButtonMenuItem("Debug Selected Colors");
	public static JMenuItem screenShot = new JMenuItem("Take Screenshot");
	public static JMenuItem clearColors = new JMenuItem("Clear Selected Colors");
	public static JMenuItem RECORD = new JMenuItem("Record Macro");
	public static JMenuItem PLAYMACRO = new JMenuItem("Play Macro");
	public static JMenuItem SETMACRO = new JMenuItem("Set Repetition");
	public static JMenuItem SAVEMACRO = new JMenuItem("Save Current Macro");
	public static JMenuItem UPDATE = new JMenuItem("Update Hooks");

	// End of variables declaration
	@Override
	public void actionPerformed(ActionEvent e) {
		Tools.log(e.getActionCommand());
		if (bot.isAuthenticated()) {
			if (Ibot.sound)
				new Thread(new SoundPlayer(new File("Data/Sounds/drop.wav"))).start();
			switch (e.getActionCommand()) {
			case "Smart Path Tool":
				// bot.pathUI.open();
				break;
			case "Pause Script":
				bot.script.pauseScript();
				break;
			case "Start Script":
				if (bot.script.paused) {
					bot.script.resumeScript();
				} else {
					bot.scriptSelector.open();
				}
			case "Stop Script":
				bot.script.stopScript();
				bot.methods.recorder.playing = false;
				break;
			case "Account Manager":
				bot.accountUI.open();
				break;
			case "Widget Explorer":
				// bot.widgetExplorer.open();
				break;
			case "Set Active Account":
				// bot.activeAccountUI.open();
				break;
			case "Path Maker":
				// bot.tronicPathUI.setVisible(true);
				break;
			case "Record Macro":
				if (!bot.methods.recorder.isRecording()) {
					bot.methods.recorder.resetTimer();
					bot.methods.recorder.setRecord(true);
				} else {
					bot.methods.recorder.setRecord(false);
				}
				Tools.log("Recording: " + bot.methods.recorder.isRecording());
				break;
			case "Play Macro":
				if (bot.methods.recorder.actions != null && bot.methods.recorder.actions.size() > 0) {
					bot.methods.recorder.setRecord(false);
					bot.methods.recorder.playing = true;
					bot.methods.recorder.executeActions();
				}
				break;
			case "Set Repetition":
				int amt = Integer.parseInt(JOptionPane.showInputDialog("Enter Reps: "));
				Tools.log("Setting Reps to: " + amt);
				bot.methods.recorder.reps = amt;
				break;
			case "Save Current Macro":
				String name = JOptionPane.showInputDialog("Save As: ");
				bot.methods.recorder.saveCurrentMacro(name);
				break;
			case "Clear Selected Colors":
				Ibot.colorList.clear();
				break;
			case "Update Hooks":
				try {
					bot.updater.update();
				} catch (ClassNotFoundException | NoSuchFieldException | SecurityException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				break;
			}
		}
	}

}
